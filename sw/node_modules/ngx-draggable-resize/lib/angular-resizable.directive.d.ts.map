{"version":3,"file":"angular-resizable.directive.d.ts","sources":["angular-resizable.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2, OnInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { ResizeHandle } from './widgets/resize-handle';\r\nimport { ResizeHandleType } from './models/resize-handle-type';\r\nimport { IResizeEvent } from './models/resize-event';\r\nexport declare class AngularResizableDirective implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n    private el;\r\n    private renderer;\r\n    private _resizable;\r\n    private _handles;\r\n    private _handleType;\r\n    private _handleResizing;\r\n    private _direction;\r\n    private _directionChanged;\r\n    private _aspectRatio;\r\n    private _containment;\r\n    private _origMousePos;\r\n    /** Original Size and Position */\r\n    private _origSize;\r\n    private _origPos;\r\n    /** Current Size and Position */\r\n    private _currSize;\r\n    private _currPos;\r\n    /** Initial Size and Position */\r\n    private _initSize;\r\n    private _initPos;\r\n    /** Snap to gird */\r\n    private _gridSize;\r\n    private _bounding;\r\n    /**\r\n     * Bugfix: iFrames, and context unrelated elements block all events, and are unusable\r\n     * https://github.com/xieziyu/ngx-draggable-resize/issues/84\r\n     */\r\n    private _helperBlock;\r\n    private draggingSub;\r\n    private _adjusted;\r\n    /** Disables the resizable if set to false. */\r\n    ngResizable: any;\r\n    /**\r\n     * Which handles can be used for resizing.\r\n     * @example\r\n     * [rzHandles] = \"'n,e,s,w,se,ne,sw,nw'\"\r\n     * equals to: [rzHandles] = \"'all'\"\r\n     *\r\n     * */\r\n    rzHandles: ResizeHandleType;\r\n    /**\r\n     * Whether the element should be constrained to a specific aspect ratio.\r\n     *  Multiple types supported:\r\n     *  boolean: When set to true, the element will maintain its original aspect ratio.\r\n     *  number: Force the element to maintain a specific aspect ratio during resizing.\r\n     */\r\n    rzAspectRatio: boolean | number;\r\n    /**\r\n     * Constrains resizing to within the bounds of the specified element or region.\r\n     *  Multiple types supported:\r\n     *  Selector: The resizable element will be contained to the bounding box of the first element found by the selector.\r\n     *            If no element is found, no containment will be set.\r\n     *  Element: The resizable element will be contained to the bounding box of this element.\r\n     *  String: Possible values: \"parent\".\r\n     */\r\n    rzContainment: string | HTMLElement;\r\n    /**\r\n     * Snaps the resizing element to a grid, every x and y pixels.\r\n     * A number for both width and height or an array values like [ x, y ]\r\n     */\r\n    rzGrid: number | number[];\r\n    /** The minimum width the resizable should be allowed to resize to. */\r\n    rzMinWidth: number;\r\n    /** The minimum height the resizable should be allowed to resize to. */\r\n    rzMinHeight: number;\r\n    /** The maximum width the resizable should be allowed to resize to. */\r\n    rzMaxWidth: number;\r\n    /** The maximum height the resizable should be allowed to resize to. */\r\n    rzMaxHeight: number;\r\n    /** Whether to prevent default event */\r\n    preventDefaultEvent: boolean;\r\n    /** emitted when start resizing */\r\n    rzStart: EventEmitter<IResizeEvent>;\r\n    /** emitted when start resizing */\r\n    rzResizing: EventEmitter<IResizeEvent>;\r\n    /** emitted when stop resizing */\r\n    rzStop: EventEmitter<IResizeEvent>;\r\n    constructor(el: ElementRef<HTMLElement>, renderer: Renderer2);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    ngAfterViewInit(): void;\r\n    /** A method to reset size */\r\n    resetSize(): void;\r\n    /** A method to get current status */\r\n    getStatus(): {\r\n        size: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n        position: {\r\n            top: number;\r\n            left: number;\r\n        };\r\n    };\r\n    private updateResizable;\r\n    /** Use it to update aspect */\r\n    private updateAspectRatio;\r\n    /** Use it to update containment */\r\n    private updateContainment;\r\n    /** Use it to create handle divs */\r\n    private createHandles;\r\n    /** Use it to create a handle */\r\n    private createHandleByType;\r\n    private removeHandles;\r\n    onMouseDown(event: MouseEvent | TouchEvent, handle: ResizeHandle): void;\r\n    private subscribeEvents;\r\n    private unsubscribeEvents;\r\n    onMouseLeave(): void;\r\n    onMouseMove(event: MouseEvent | TouchEvent): void;\r\n    private startResize;\r\n    private stopResize;\r\n    private onResizing;\r\n    private getResizingEvent;\r\n    private updateDirection;\r\n    private resizeTo;\r\n    private doResize;\r\n    private adjustByRatio;\r\n    private checkBounds;\r\n    private checkSize;\r\n    private getBounding;\r\n    private resetBounding;\r\n    private getGridSize;\r\n}\r\n"]}