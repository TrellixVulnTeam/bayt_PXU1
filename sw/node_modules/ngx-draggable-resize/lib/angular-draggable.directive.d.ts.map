{"version":3,"file":"angular-draggable.directive.d.ts","sources":["angular-draggable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, OnInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, AfterViewInit } from \"@angular/core\";\r\nimport { IPosition } from \"./models/position\";\r\nexport declare class AngularDraggableDirective implements OnInit, OnDestroy, OnChanges, AfterViewInit {\r\n    private el;\r\n    private renderer;\r\n    private allowDrag;\r\n    private moving;\r\n    private orignal;\r\n    private oldTrans;\r\n    private tempTrans;\r\n    private currTrans;\r\n    private oldZIndex;\r\n    private _zIndex;\r\n    private needTransform;\r\n    private draggingSub;\r\n    /**\r\n     * Bugfix: iFrames, and context unrelated elements block all events, and are unusable\r\n     * https://github.com/xieziyu/ngx-draggable-resize/issues/84\r\n     */\r\n    private _helperBlock;\r\n    started: EventEmitter<any>;\r\n    stopped: EventEmitter<any>;\r\n    edge: EventEmitter<any>;\r\n    /** Make the handle HTMLElement draggable */\r\n    handle: HTMLElement;\r\n    /** Set the bounds HTMLElement */\r\n    bounds: HTMLElement;\r\n    /** List of allowed out of bounds edges **/\r\n    outOfBounds: {\r\n        top: boolean;\r\n        right: boolean;\r\n        bottom: boolean;\r\n        left: boolean;\r\n    };\r\n    /** Round the position to nearest grid */\r\n    gridSize: number;\r\n    /** Set z-index when dragging */\r\n    zIndexMoving: string;\r\n    /** Set z-index when not dragging */\r\n    zIndex: string;\r\n    /** Whether to limit the element stay in the bounds */\r\n    inBounds: boolean;\r\n    /** Whether the element should use it's previous drag position on a new drag event. */\r\n    trackPosition: boolean;\r\n    /** Input css scale transform of element so translations are correct */\r\n    scale: number;\r\n    /** Whether to prevent default event */\r\n    preventDefaultEvent: boolean;\r\n    /** Set initial position by offsets */\r\n    position: IPosition;\r\n    /** Lock axis: 'x' or 'y' */\r\n    lockAxis: string;\r\n    /** Emit position offsets when moving */\r\n    movingOffset: EventEmitter<IPosition>;\r\n    /** Emit position offsets when put back */\r\n    endOffset: EventEmitter<IPosition>;\r\n    ngDraggable: any;\r\n    constructor(el: ElementRef, renderer: Renderer2);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    private getDragEl;\r\n    resetPosition(): void;\r\n    private moveTo;\r\n    private transform;\r\n    private pickUp;\r\n    private subscribeEvents;\r\n    private unsubscribeEvents;\r\n    boundsCheck(): {\r\n        top: boolean;\r\n        right: boolean;\r\n        bottom: boolean;\r\n        left: boolean;\r\n    };\r\n    /** Get current offset */\r\n    getCurrentOffset(): IPosition;\r\n    private putBack;\r\n    checkHandleTarget(target: EventTarget, element: Element): boolean;\r\n    onMouseDown(event: MouseEvent | TouchEvent): void;\r\n    onMouseMove(event: MouseEvent | TouchEvent): void;\r\n}\r\n"]}